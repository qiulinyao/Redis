
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import redis.clients.jedis.*;

import java.util.*;

public class RedisUtil  {

    private static Logger logger = Logger.getLogger(RedisUtil.class);

    @Autowired
    private JedisCluster jedisCluster;


    //=============================common============================
    /**
     * 指定缓存失效时间
     * @param key 键
     * @param time 时间(秒)
     * @return
     */
    public boolean expire(String key,int time){
        try {
            if(key == null) {return false;}

            if(time>0){
                jedisCluster.expire(key, time);
            }
            return true;
        } catch (Exception e) {
            logger.error(e.getMessage(), e);
            return false;
        }
    }

    /**
     * 判断key是否存在
     * @param key 键
     * @return true 存在 false不存在
     */
    public boolean hasKey(String key){
        try {
            if(key == null) {return false;}

            return jedisCluster.exists(key);
        } catch (Exception e) {
            logger.error(e.getMessage(), e);
            return false;
        }
    }

    /**
     * 删除缓存
     * @param key 可以传一个值 或多个
     */
    public void del(String ... key){
        try{
            if(key!=null&&key.length>0){
                jedisCluster.del(key);
            }
        }catch (Exception e){
            logger.error(e.getMessage(), e);
        }
    }


    //============================ String =============================
    /**
     * 获取某个key对应的value，时间复杂度O(1)
     * @param key 键
     * @return 值
     */
    public String get(String key){
        try{
            return key==null?null:jedisCluster.get(key);
        }catch (Exception e){
            logger.error(e.getMessage(), e);
            return null;
        }
    }

    /**
     * 为一个key设置value，可以配合EX/PX参数指定key的有效期，通过NX/XX参数针对key是否存在的情况进行区别操作，时间复杂度O(1)
     * @param key 键
     * @param value 值
     * @return true成功 false失败
     */
    public boolean set(String key,String value) {
        try {
            if(key == null || value == null) {return false;}

            jedisCluster.set(key, value);
            return true;
        } catch (Exception e) {
            logger.error(e.getMessage(), e);
            return false;
        }
    }

    /**
     * 为一个key设置value，可以配合EX/PX参数指定key的有效期，通过NX/XX参数针对key是否存在的情况进行区别操作，时间复杂度O(1)
     * @param key 键
     * @param value 值
     * @param time 时间(秒) time要大于0 如果time小于等于0 将设置无限期
     * @return true成功 false 失败
     */
    public boolean setex(String key,String value,int time){
        try {
            if(key == null || value == null) {return false;}

            jedisCluster.setex(key, time, value);

            return true;
        } catch (Exception e) {
            logger.error(e.getMessage(), e);
            return false;
        }
    }

    /**
     * 将key对应的value值自增1，并返回自增后的值。只对可以转换为整型的String数据起作用。时间复杂度O(1)
     * @param key 键
     * @param delta 要增加几(大于0)
     * @return
     */
    public Long incrBy(String key, long delta){
        try{
            if(key == null) {return 0L;}

            return jedisCluster.incrBy(key, delta);
        }catch (Exception e) {
            logger.error(e.getMessage(), e);
            return 0L;
        }
    }

    /**
     * 获取多个key对应的value，时间复杂度O(N)
     * @param keys 数组
     * @return
     */
    public List<String> mget(String... keys){
        try{
            if(keys == null || keys.length == 0) {return null;}
            return jedisCluster.mget(keys);
        }catch (Exception e) {
            logger.error(e.getMessage(), e);
            return null;
        }
    }

    /**
     * 获取多个key对应的value，时间复杂度O(N)
     * @param keys List
     * @return
     */
    public List<String> mget(List<String> keys){
        try{
            if(keys == null || keys.size() == 0) {return null;}
            return mget(keys.toArray(new String[0]));
        }catch (Exception e) {
            logger.error(e.getMessage(), e);
            return null;
        }
    }

    /**
     * 为多个key设置value，时间复杂度O(N)
     * @param keys List
     * @return
     */
    public String mset(List<String> keys){
        try{
            if(keys == null || keys.size() == 0) {return null;}
            return jedisCluster.mset (keys.toArray(new String[0]));
        }catch (Exception e) {
            logger.error(e.getMessage(), e);
            return null;
        }
    }



    //================================ Hash =================================
    /**
     * 返回指定Hash中field字段的值，时间复杂度O(1)
     * @param key 键 不能为null
     * @param field 项 不能为null
     * @return 值
     */
    public String hget(String key,String field){
        try{
            if(key == null || field == null) {return null;}

            return jedisCluster.hget(key, field);
        }catch (Exception e) {
            logger.error(e.getMessage(), e);
            return null;
        }
    }

    /**
     * 将key对应的Hash中的field设置为value。如果该Hash不存在，会自动创建一个。时间复杂度O(1)
     * @param key 键
     * @param field 项
     * @param value 值
     * @return true 成功 false失败
     */
    public boolean hset(String key,String field,String value) {
        try {
            if(key == null || field == null || value==null) {return false;}

            jedisCluster.hset(key, field, value);
            return true;
        } catch (Exception e) {
            logger.error(e.getMessage(), e);
            return false;
        }
    }

    /**
     * 将key对应的Hash中的field设置为value。如果该Hash不存在，会自动创建一个。时间复杂度O(1), 并设置时间
     * @param key 键
     * @param field 项
     * @param value 值
     * @param time 时间(秒)  注意:如果已存在的hash表有时间,这里将会替换原有的时间
     * @return true 成功 false失败
     */
    public boolean hset(String key,String field,String value,int time) {
        try {
            if(key == null || field == null || value==null) {return false;}

            hset(key, field, value);
            if(time>0){
                expire(key, time);
            }
            return true;
        } catch (Exception e) {
            logger.error(e.getMessage(), e);
            return false;
        }
    }

    /**
     * 同HSET和HGET，可以批量操作同一个key下的多个field，时间复杂度：O(N)，N为一次操作的field数量
     * @param key 键
     * @return 对应的多个键值
     */
    public List<String> hmget(String key, String[] fields){
        try{
            if(key == null || fields == null || fields.length==0) {return null;}

            return jedisCluster.hmget(key, fields);
        }catch (Exception e) {
            logger.error(e.getMessage(), e);
            return null;
        }
    }

    /**
     * 返回指定Hash中所有的field-value对。返回结果为数组，数组中field和value交替出现。时间复杂度O(N)
     * @param key 键
     * @return 对应的多个键值
     */
    public Map<String, String> hgetAll(String key){
        try{
            if(key == null) {return null;}

            return jedisCluster.hgetAll(key);
        }catch (Exception e) {
            logger.error(e.getMessage(), e);
            return null;
        }
    }

    /**
     * 同HSET和HGET，可以批量操作同一个key下的多个field，时间复杂度：O(N)，N为一次操作的field数量
     * @param key 键
     * @param map 对应多个键值
     * @return true 成功 false 失败
     */
    public String hmset(String key, Map<String,String> map){
        try {
            if(map == null || map.size() == 0) {return null;}

            Iterator<Map.Entry<String,String>> entries = map.entrySet().iterator();
            while ((entries.hasNext())){
                Map.Entry<String,String> entry = entries.next();
                if(entry.getValue() == null){
                    entries.remove();
                }
            }

            if(map == null || map.size() == 0) {return null;}

            return jedisCluster.hmset(key, map);

        } catch (Exception e) {
            logger.error(e.getMessage(), e);
            return null;
        }
    }

    /**
     * HashSet 并设置时间
     * @param key 键
     * @param map 对应多个键值
     * @param time 时间(秒)
     * @return true成功 false失败
     */
    public boolean hmset(String key, Map<String,String> map, int time){
        try {
            hmset(key, map);
            if(time>0){
                expire(key, time);
            }
            return true;
        } catch (Exception e) {
            logger.error(e.getMessage(), e);
            return false;
        }
    }

    /**
     * 删除指定Hash中的field（1个或多个），时间复杂度：O(N)，N为操作的field数量
     * @param key 键 不能为null
     * @param fields 项 可以使多个 不能为null
     */
    public void hdel(String key, String... fields){
        try{
            if(key == null || fields == null || fields.length==0) {return;}

            jedisCluster.hdel(key, fields);
        }catch (Exception e) {
            logger.error(e.getMessage(), e);
        }

    }

    /**
     * 判断指定Hash中field是否存在，存在返回1，不存在返回0，时间复杂度O(1)
     * @param key 键 不能为null
     * @param field 项 不能为null
     * @return true 存在 false不存在
     */
    public boolean hexists(String key, String field){
        try{
            if(key == null || field == null) {return false;}

            return jedisCluster.hexists(key, field);
        }catch (Exception e) {
            logger.error(e.getMessage(), e);
            return false;
        }
    }

    /**
     * 同INCRBY命令，对指定Hash中的一个field进行INCRBY，时间复杂度O(1)
     * @param key 键
     * @param field 项
     * @param by 要增加几(大于0)
     * @return
     */
    public long hincr(String key, String field, long by){
        try{
            if(key == null || field == null) {return 0L;}

            return jedisCluster.hincrBy(key, field, by);
        }catch (Exception e) {
            logger.error(e.getMessage(), e);
            return 0L;
        }
    }


    //=============================== List =================================
    /**
     * 返回指定List中指定范围的元素（双端包含，即LRANGE key 0 10会返回11个元素），时间复杂度O(N)。
     * 0 到 -1代表所有值
     * 应尽可能控制一次获取的元素数量，一次获取过大范围的List元素会导致延迟，同时对长度不可预知的List，避免使用LRANGE key 0 -1这样的完整遍历操作。
     * @param key 键
     * @param start 开始
     * @param end 结束
     * @return
     */
    public List<String> lrange(String key, long start, long end){
        try {
            if(key == null) {return null;}

            return jedisCluster.lrange(key, start, end);
        } catch (Exception e) {
            logger.error(e.getMessage(), e);
            return null;
        }
    }

    /**
     * 返回指定List的长度，时间复杂度O(1)
     * @param key 键
     * @return
     */
    public long llen(String key){
        try {
            if(key == null) {return 0L;}

            return jedisCluster.llen(key);
        } catch (Exception e) {
            logger.error(e.getMessage(), e);
            return 0;
        }
    }

    /**
     * 返回指定List指定index上的元素，如果index越界，返回nil。index数值是回环的，即-1代表List最后一个位置，-2代表List倒数第二个位置。时间复杂度O(N)
     * @param key 键
     * @param index 索引  index>=0时， 0 表头，1 第二个元素，依次类推；index<0时，-1，表尾，-2倒数第二个元素，依次类推
     * @return
     */
    public String lindex(String key,long index){
        try {
            if(key == null) {return null;}

            return jedisCluster.lindex(key, index);
        } catch (Exception e) {
            logger.error(e.getMessage(), e);
            return null;
        }
    }

    /**
     * 向指定List的左侧（即头部）插入1个或多个元素，返回插入后的List长度。时间复杂度O(N)，N为插入元素的数量
     * @param key 键
     * @param value 值
     * @return
     */
    public long lpush(String key, String... value) {
        try {
            if(key == null || value == null || value.length==0) {return 0L;}

            return jedisCluster.lpush(key, value);
        } catch (Exception e) {
            logger.error(e.getMessage(), e);
            return 0L;
        }
    }

    /**
     * 同LPUSH，向指定List的右侧（即尾部）插入1或多个元素
     * @param key 键
     * @param value 值
     * @return
     */
    public long rpush(String key, String... value) {
        try {
            if(key == null || value==null || value.length==0) {return 0L;}

            return jedisCluster.rpush(key, value);
        } catch (Exception e) {
            logger.error(e.getMessage(), e);
            return 0L;
        }
    }

    /**
     * 移除N个值为value的元素
     * @param key 键
     * @param count 移除多少个
     * @param value 值
     * @return 移除的个数
     */
    public long lrem(String key,long count,String value) {
        try {
            if(key == null || value==null) {return 0L;}

            return jedisCluster.lrem(key, count, value);
        } catch (Exception e) {
            logger.error(e.getMessage(), e);
            return 0;
        }
    }


    //============================ Set =============================
    /**
     * 向指定Set中添加1个或多个member，如果指定Set不存在，会自动创建一个。时间复杂度O(N)，N为添加的member个数
     * @param key 键
     * @param values 值 可以是多个
     * @return 成功个数
     */
    public long sadd(String key, String... values) {
        try {
            if(key == null || values==null || values.length==0) {return 0L;}

            return jedisCluster.sadd(key, values);
        } catch (Exception e) {
            logger.error(e.getMessage(), e);
            return 0L;
        }
    }

    /**
     * 返回指定Hash中所有的member，时间复杂度O(N)
     * @param key 键
     * @return
     */
    public Set<String> smembers(String key){
        try {
            if(key == null) {return null;}

            return jedisCluster.smembers(key);
        } catch (Exception e) {
            logger.error(e.getMessage(), e);
            return null;
        }
    }

    /**
     * 判断指定的value是否存在于指定Set中，时间复杂度O(1)
     * @param key 键
     * @param value 值
     * @return true 存在 false不存在
     */
    public boolean sismember(String key,String value){
        try {
            if(key == null || value==null) {return false;}

            return jedisCluster.sismember(key, value);
        } catch (Exception e) {
            logger.error(e.getMessage(), e);
            return false;
        }
    }

    /**
     * 从指定Set中随机返回1个或多个member，时间复杂度O(N)，N为返回的member个数
     * @param key 键
     * @return true 存在 false不存在
     */
    public String srandmember(String key){
        try {
            if(key == null) {return null;}

            return jedisCluster.srandmember(key);
        } catch (Exception e) {
            logger.error(e.getMessage(), e);
            return null;
        }
    }

    /**
     * 计算1个Set与1或多个Set的差集并返回/存储至另一个Set中，时间复杂度O(N)，N为参与计算的所有集合的总member数
     * @param keys 键
     * @return
     */
    public Set<String> sdiff(String... keys){
        try{
            if(keys == null || keys.length == 0) {return null;}
            return jedisCluster.sdiff(keys);
        } catch (Exception e) {
            logger.error(e.getMessage(), e);
            return null;
        }
    }

    /**
     * 返回指定Set中的member个数，时间复杂度O(1)
     * @param key 键
     * @return
     */
    public long scard(String key){
        try {
            if(key == null) {return 0L;}

            return jedisCluster.scard(key);
        } catch (Exception e) {
            logger.error(e.getMessage(), e);
            return 0;
        }
    }

    /**
     * 从指定Set中移除1个或多个member，时间复杂度O(N)，N为移除的member个数
     * @param key 键
     * @param values 值 可以是多个
     * @return 移除的个数
     */
    public long srem(String key, String ...values) {
        try {
            if(key == null || values==null || values.length==0) {return 0L;}

            return jedisCluster.srem(key, values);
        } catch (Exception e) {
            logger.error(e.getMessage(), e);
            return 0L;
        }
    }


    //=============================== Sorted Set =================================
    /**
     * 向指定Sorted Set中添加1个或多个member，时间复杂度O(Mlog(N))，M为添加的member数量，N为Sorted Set中的member数量
     * @param key
     * @param score 权重
     * @param member 要加入的值，
     * @return 状态码 1成功，0已存在member的值
     * */
    public long zadd(String key, double score, String member) {
        try{
            if(key == null || member==null) {return 0L;}

            return jedisCluster.zadd(key, score, member);
        }catch (Exception e){
            logger.error(e.getMessage(), e);
            return 0L;
        }
    }

    public long zadd(String key, Map<String,Double> scoreMembers) {
        try{
            if(key == null) {return 0L;}

            return jedisCluster.zadd(key, scoreMembers);
        }catch (Exception e){
            logger.error(e.getMessage(), e);
            return 0L;
        }
    }

    /**
     * 返回指定Sorted Set中的member数量，时间复杂度O(1)
     * @param key
     * @return 如果返回0则集合不存在
     * */
    public Long zcard(String key) {
        try{
            if(key == null) {return 0L;}

            return jedisCluster.zcard(key);
        }catch (Exception e){
            logger.error(e.getMessage(), e);
            return 0L;
        }
    }

    /**
     * 返回指定Sorted Set中指定score范围内的member数量，时间复杂度：O(log(N))
     * @param  key
     * @param  min 最小排序位置
     * @param  max 最大排序位置
     * */
    public long zcount(String key, double min, double max) {
        try{
            if(key == null) {return 0L;}

            return jedisCluster.zcount(key, min, max);
        }catch (Exception e){
            logger.error(e.getMessage(), e);
            return 0L;
        }
    }

    /**
     * 同INCRBY，对指定Sorted Set中的指定member的score进行自增，时间复杂度O(log(N))
     * @param  key
     * @param  score 要增的权重
     * @param  member 要插入的值
     * @return 增后的权重
     * */
    public double zincrby(String key, double score, String member) {
        try{
            if(key == null || member==null) {return 0L;}

            return jedisCluster.zincrby(key, score, member);
        }catch (Exception e){
            logger.error(e.getMessage(), e);
            return 0;
        }
    }

    /**
     * 返回指定Sorted Set中指定排名范围内的所有member，ZRANGE为按score升序排序，ZREVRANGE为按score降序排序，时间复杂度O(log(N)+M)，M为本次返回的member数
     * @param  key
     * @param  start 开始位置(包含)
     * @param  end 结束位置(包含)
     * @return Set<String>
     * */
    public Set<String> zrange(String key, int start, int end) {
        try{
            if(key == null) {return null;}

            return jedisCluster.zrange(key, start, end);
        }catch (Exception e){
            logger.error(e.getMessage(), e);
            return null;
        }
    }

    /**
     * 返回指定Sorted Set中指定排名范围内的所有member，ZRANGE为按score升序排序，ZREVRANGE为按score降序排序，时间复杂度O(log(N)+M)，M为本次返回的member数
     * @param  key
     * @param  start
     * @param  end
     * @return Set<String>
     * */
    public Set<String> zrevrange(String key, int start, int end) {
        try{
            if(key == null) {return null;}

            return jedisCluster.zrevrange(key, start, end);
        }catch (Exception e){
            logger.error(e.getMessage(), e);
            return null;
        }
    }

    /**
     * 返回指定Sorted Set中指定score范围内的所有member，返回结果以升序/降序排序，min和max可以指定为-inf和+inf，代表返回所有的member。时间复杂度O(log(N)+M)
     * @param  key
     * @param  min 上限权重
     * @param  max 下限权重
     * @return Set<String>
     * */
    public Set<String> zrangeByScore(String key, double min, double max) {
        try{
            if(key == null) {return null;}

            return jedisCluster.zrangeByScore(key, min, max);
        }catch (Exception e){
            logger.error(e.getMessage(), e);
            return null;
        }
    }

    /**
     * 返回指定member在Sorted Set中的排名，ZRANK返回按升序排序的排名，ZREVRANK则返回按降序排序的排名。时间复杂度O(log(N))
     * @param  key
     * @param  member
     * @return long 位置
     * */
    public long zrank(String key, String member) {
        try{
            if(key == null || member==null) {return 0L;}

            return jedisCluster.zrank(key, member);
        }catch (Exception e){
            logger.error(e.getMessage(), e);
            return -1L;
        }
    }

    /**
     * 返回指定member在Sorted Set中的排名，ZRANK返回按升序排序的排名，ZREVRANK则返回按降序排序的排名。时间复杂度O(log(N))
     * @param  key
     * @param  member
     * @return long 位置
     * */
    public long zrevrank(String key, String member) {
        try{
            if(key == null || member==null) {return 0L;}

            return jedisCluster.zrevrank(key, member);
        }catch (Exception e){
            logger.error(e.getMessage(), e);
            return -1L;
        }
    }

    /**
     * 从指定Sorted Set中删除1个或多个member，时间复杂度O(Mlog(N))，M为删除的member数量，N为Sorted Set中的member数量
     * @param  key
     * @param  member
     * @return 返回1成功
     * */
    public long zrem(String key, String... member) {
        try{
            if(key == null || member==null || member.length==0) {return 0L;}

            return jedisCluster.zrem(key, member);
        }catch (Exception e){
            logger.error(e.getMessage(), e);
            return 0L;
        }
    }

    /**
     * 移除Sorted Set中指定排名范围/指定score范围内的所有member。时间复杂度O(log(N)+M)
     * @param  key
     * @param  start 开始区间，从0开始(包含)
     * @param  end 结束区间,-1为最后一个元素(包含)
     * @return 删除的数量
     * */
    public long zremrangeByRank(String key, int start, int end) {
        try{
            if(key == null) {return 0L;}

            return jedisCluster.zremrangeByRank(key, start, end);
        }catch (Exception e){
            logger.error(e.getMessage(), e);
            return 0L;
        }
    }

    /**
     * 移除Sorted Set中指定排名范围/指定score范围内的所有member。时间复杂度O(log(N)+M)
     * @param  key
     * @param  min 下限权重(包含)
     * @param  max 上限权重(包含)
     * @return 删除的数量
     * */
    public long zremrangeByScore(String key, double min, double max) {
        try{
            if(key == null) {return 0L;}

            return jedisCluster.zremrangeByScore(key, min, max);
        }catch (Exception e){
            logger.error(e.getMessage(), e);
            return 0L;
        }
    }

    /**
     * 返回指定Sorted Set中指定member的score，时间复杂度O(1)
     * @param  key
     * @param  member
     * @return double 权重
     * */
    public Double zscore(String key, String member) {
        try{
            if(key == null || member==null) {return null;}

            return jedisCluster.zscore(key, member);
        }catch (Exception e){
            logger.error(e.getMessage(), e);
            return null;
        }
    }

    /**
     * 计算给定的一个或多个有序集的并集，并存储在新的 key 中
     * @param  dstKey
     * @param  sets
     * @return double 权重
     * */
    public long zunionstore(String dstKey, String... sets) {
        try{
            if(dstKey==null || sets == null || sets.length == 0) {return 0L;}
            return jedisCluster.zunionstore(dstKey, sets);
        }catch (Exception e){
            logger.error(e.getMessage(), e);
            return 0L;
        }
    }

    /**
     * 计算给定的一个或多个有序集的并集，并存储在新的 key 中
     * @param  dstKey
     * @param  sets
     * @return double 权重
     * */
    public long zunionstore(String dstKey, List<String> sets) {
        try{
            if(dstKey==null || sets == null || sets.size() == 0) {return 0L;}
            return jedisCluster.zunionstore(dstKey, sets.toArray(new String[0]));
        }catch (Exception e){
            logger.error(e.getMessage(), e);
            return 0L;
        }
    }

    //=============================== sort =================================
    /**
     * sort
     * @param  key
     * @param  count
     * @return
     * */
    public List<String> CollectionMax(String key, int count){
        SortingParams sortingParams = new SortingParams();
        sortingParams.desc();
        sortingParams.limit(0,count);

        return jedisCluster.sort(key, sortingParams);
    }


    //=============================== scan =================================
    /**
     * 遍历
     * 返回的数据结构包含2个变量，一个是下次遍历对应的游标位置，一个是遍历的数据集。
     * 当游标位置为0时表示遍历完所有元素完毕。
     * @param pattern 匹配的模式
     * @param count 查询的个数
     * @return 查询结果
     */
    public Set<String> scan(String pattern, int count){

        ScanParams scanParams = new ScanParams();
        scanParams.match(pattern);
        scanParams.count(count);

        //TreeSet 是一个有序的集合
        Set<String> keys = new TreeSet<>();

        for (JedisPool clusterNode : jedisCluster.getClusterNodes().values()) {

            String cursor = "0";
            List<String> scanResult = new ArrayList<>();

            do{
                Jedis resource = clusterNode.getResource();
                ScanResult<String> scan = resource.scan(cursor, scanParams);
                cursor = scan.getStringCursor();
                scanResult = scan.getResult();
                keys.addAll(scanResult);
                resource.close();

            }while (!cursor.equals("0") && !scanResult.isEmpty());

        }

        return keys;
    }

    /**
     * 遍历
     * 返回的数据结构包含2个变量，一个是下次遍历对应的游标位置，一个是遍历的数据集。
     * 当游标位置为0时表示遍历完所有元素完毕。
     * @param pattern 匹配的模式
     * @param count 查询的个数
     * @return 查询结果
     */
    public Set<String> sscan(String skey, String pattern, int count){

        ScanParams scanParams = new ScanParams();
        scanParams.match(pattern);
        scanParams.count(count);

        //TreeSet 是一个有序的集合
        Set<String> keys = new TreeSet<>();

        String cursor = "0";
        List<String> scanResult = new ArrayList<>();

        do{
            ScanResult<String> scan = jedisCluster.sscan(skey, cursor, scanParams);
            cursor = scan.getStringCursor();
            scanResult = scan.getResult();
            keys.addAll(scanResult);

        }while (!cursor.equals("0") && !scanResult.isEmpty());

        return keys;
    }

    /**
     * 遍历
     * 返回的数据结构包含2个变量，一个是下次遍历对应的游标位置，一个是遍历的数据集。
     * 当游标位置为0时表示遍历完所有元素完毕。
     * @param pattern 匹配的模式
     * @param count 查询的个数
     * @return 查询结果
     */
    public Set<String> zscan(String skey, String pattern, int count){

        ScanParams scanParams = new ScanParams();
        scanParams.match(pattern);
        scanParams.count(count);

        //TreeSet 是一个有序的集合
        Set<String> keys = new TreeSet<>();

        String cursor = "0";
        List<Tuple> scanResult = new ArrayList<>();

        do{

            ScanResult<Tuple> scan = jedisCluster.zscan(skey, cursor, scanParams);
            cursor = scan.getStringCursor();

            scanResult = scan.getResult();
            for(Tuple key : scanResult){
                keys.add(key.getElement());
            }

        }while (!cursor.equals("0") && !scanResult.isEmpty());

        return keys;
    }


}

