
import com.zts.clientinteraction.utils.RedisUtil;
import org.apache.log4j.Logger;
import org.springframework.context.EnvironmentAware;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.env.Environment;
import redis.clients.jedis.HostAndPort;
import redis.clients.jedis.JedisCluster;
import redis.clients.jedis.JedisPoolConfig;

import java.util.HashSet;
import java.util.Set;


@Configuration
//@PropertySource("classpath:/redis.properties")
public class RedisConfig implements EnvironmentAware {

    private static Logger logger = Logger.getLogger(RedisConfig.class);

    //@Value("${redis.maxIdle}")
    private Integer maxIdle = 300;

    //@Value("${redis.maxTotal}")
    private Integer maxTotal = 1000;

    //@Value("${redis.maxWaitMillis}")
    private Integer maxWaitMillis = -1;

    //@Value("${redis.minEvictableIdleTimeMillis}")
    private Integer minEvictableIdleTimeMillis = 300000;

    //@Value("${redis.numTestsPerEvictionRun}")
    private Integer numTestsPerEvictionRun = 3;

    //@Value("${redis.timeBetweenEvictionRunsMillis}")
    private long timeBetweenEvictionRunsMillis = -1;

    //@Value("${redis.testOnBorrow}")
    private boolean testOnBorrow = false;

    //@Value("${redis.testWhileIdle}")
    private boolean testWhileIdle = false;

    /**
     *  redis cluster nodes
     */
    //@Value("${spring.redis.cluster.nodes}")
    private String clusterNodes = "10.29.181.18:7000,10.29.181.18:7001,10.29.181.18:7002";

    //@Value("${spring.redis.cluster.max-redirects}")
    private Integer mmaxRedirectsac = 3;

    @Override
    public void setEnvironment(Environment environment) {

        String redisCluster = environment.getProperty("REDIS_CLUSTER");
        if(redisCluster != null) {
            clusterNodes = redisCluster;
        }
        logger.info("REDIS_CLUSTER=" + clusterNodes);

    }

    /**
     * JedisPoolConfig 连接池
     * @return
     */
    @Bean
    public JedisPoolConfig jedisPoolConfig() {
        JedisPoolConfig jedisPoolConfig = new JedisPoolConfig();
        // 最大空闲数
        jedisPoolConfig.setMaxIdle(maxIdle);
        // 连接池的最大数据库连接数
        jedisPoolConfig.setMaxTotal(maxTotal);
        // 最大建立连接等待时间
        jedisPoolConfig.setMaxWaitMillis(maxWaitMillis);
        // 逐出连接的最小空闲时间 默认1800000毫秒(30分钟)
        jedisPoolConfig.setMinEvictableIdleTimeMillis(minEvictableIdleTimeMillis);
        // 每次逐出检查时 逐出的最大数目 如果为负数就是 : 1/abs(n), 默认3
        jedisPoolConfig.setNumTestsPerEvictionRun(numTestsPerEvictionRun);
        // 逐出扫描的时间间隔(毫秒) 如果为负数,则不运行逐出线程, 默认-1
        jedisPoolConfig.setTimeBetweenEvictionRunsMillis(timeBetweenEvictionRunsMillis);
        // 是否在从池中取出连接前进行检验,如果检验失败,则从池中去除连接并尝试取出另一个
        jedisPoolConfig.setTestOnBorrow(testOnBorrow);
        // 在空闲时检查有效性, 默认false
        jedisPoolConfig.setTestWhileIdle(testWhileIdle);
        return jedisPoolConfig;
    }

    /**
     * 注意：
     * 这里返回的JedisCluster是单例的，并且可以直接注入到其他类中去使用
     * @return
     */
    @Bean
    public JedisCluster getJedisCluster(JedisPoolConfig jedisPoolConfig) {

        //获取服务器数组(这里要相信自己的输入，所以没有考虑空指针问题)
        String[] serverArray = clusterNodes.split(",");
        Set<HostAndPort> nodes = new HashSet<>();

        for (String ipPort : serverArray) {
            String[] ipPortPair = ipPort.split(":");
            nodes.add(new HostAndPort(ipPortPair[0].trim(), Integer.valueOf(ipPortPair[1].trim())));
        }

        return new JedisCluster(nodes, jedisPoolConfig);
    }

    /**
     * 注入封装RedisTemplate
     * @Title: redisUtil
     * @return RedisUtil
     * @autor lpl
     * @date 2017年12月21日
     * @throws
     */
    @Bean(name = "redisUtil")
    public RedisUtil redisUtil() {
        RedisUtil redisUtil = new RedisUtil();
        return redisUtil;
    }



}

